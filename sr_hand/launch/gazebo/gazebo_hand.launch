<launch>
  <!-- Gazebo world file to load. -->
  <arg name="world_name" default="$(find sr_description)/other/worlds/shadowhand.world" />
  <arg name="gui" default="true"/>

  <!-- Gazebo world file to load. -->
  <!-- We want gazebo to stay in the root namespace but the nodes below to be
  relative. Can then launch this inside a namespace to namespace the hand. -->
  <group ns="/">
      <!-- We reuse the logic in empty_world.launch, changing only the name of the world to be launched -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="gui" value="$(arg gui)"/>
      </include>
  </group>

  <!-- The real hand uses sr_description but getting gazebo to work
  properly with that is a pain as it needs robotParam set in the urdf and
  various bits of mapping. The arm uses robot_description as does that arm
  and hand. So we just set both params and stop fighting! -->
  <include file="$(find sr_description)/loaders/load_hand_model.launch">
      <arg name="robot_param" value="sh_description" />
  </include>
  <include file="$(find sr_description)/loaders/load_hand_model.launch">
      <arg name="robot_param" value="robot_description" />
  </include>

  <node name="spawn_hand" pkg="gazebo_ros" type="spawn_model" args="-urdf -param sh_description -z 0.01 -model shadow_model" respawn="false" output="screen" />

  <!-- Controllers for the hand -->
  <include file="$(find sr_hand)/launch/gazebo/loaders/hand_controllers.launch"/>

  <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch"/>
  	
  <node pkg="robot_state_publisher" type="state_publisher"
        name="robot_state_publisher_full_pos">
    <param name="publish_frequency" type="double" value="20.0" />
  </node>

</launch>
